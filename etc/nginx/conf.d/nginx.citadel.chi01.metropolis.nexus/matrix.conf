# Choose sync worker based on the existence of "since" query parameter
map $arg_since $sync {
    default synapse_sync;
    '' synapse_initial_sync;
}

# Extract username from access token passed as URL parameter
map $arg_access_token $accesstoken_from_urlparam {
    default   $arg_access_token;
    "~mat_(?<username>.*?)_.*"           $username;
}

# Extract username from access token passed as authorization header
map $http_authorization $mxid_localpart {
    default                              $http_authorization;
    "~Bearer mat_(?<username>.*?)_.*"    $username;
    ""                                   $accesstoken_from_urlparam;
}

map $request_uri $synapse_backend {
    # Sync requests
    ~*^/_matrix/client/(r0|v3)/sync$ synapse_sync_workers;
    ~*^/_matrix/client/(api/v1|r0|v3)/events$ synapse_sync_workers;
    ~*^/_matrix/client/(api/v1|r0|v3)/initialSync$ synapse_sync_workers;
    ~*^/_matrix/client/(api/v1|r0|v3)/rooms/[^/]+/initialSync$ synapse_sync_workers;

    # Federation requests
    ~*^/_matrix/federation/v1/version$ synapse_workers;
    ~*^/_matrix/federation/v1/event/ synapse_workers;
    ~*^/_matrix/federation/v1/state/ synapse_workers;
    ~*^/_matrix/federation/v1/state_ids/ synapse_workers;
    ~*^/_matrix/federation/v1/backfill/ synapse_workers;
    ~*^/_matrix/federation/v1/get_missing_events/ synapse_workers;
    ~*^/_matrix/federation/v1/publicRooms synapse_workers;
    ~*^/_matrix/federation/v1/query/ synapse_workers;
    ~*^/_matrix/federation/v1/make_join/ synapse_workers;
    ~*^/_matrix/federation/v1/make_leave/ synapse_workers;
    ~*^/_matrix/federation/(v1|v2)/send_join/ synapse_workers;
    ~*^/_matrix/federation/(v1|v2)/send_leave/ synapse_workers;
    ~*^/_matrix/federation/v1/make_knock/ synapse_workers;
    ~*^/_matrix/federation/v1/send_knock/ synapse_workers;
    ~*^/_matrix/federation/(v1|v2)/invite/ synapse_workers;
    ~*^/_matrix/federation/v1/event_auth/ synapse_workers;
    ~*^/_matrix/federation/v1/timestamp_to_event/ synapse_workers;
    ~*^/_matrix/federation/v1/exchange_third_party_invite/ synapse_workers;
    ~*^/_matrix/federation/v1/user/devices/ synapse_workers;
    ~*^/_matrix/key/v2/query synapse_workers;
    ~*^/_matrix/federation/v1/hierarchy/ synapse_workers;

    # Inbound federation transaction request
    ~*^/_matrix/federation/v1/send/ synapse_workers;

    # Encryption requests
    ~*^/_matrix/client/(r0|v3|unstable)/keys/query$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/keys/changes$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/keys/claim$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/room_keys/ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/keys/upload synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/keys/device_signing/upload$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/keys/signatures/upload$ synapse_workers;

    # Client API requests
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/createRoom$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/publicRooms$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/joined_members$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/context/.*$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/members$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state$ synapse_workers;
    ~*^/_matrix/client/v1/rooms/.*/hierarchy$ synapse_workers;
    ~*^/_matrix/client/(v1|unstable)/rooms/.*/relations/ synapse_workers;
    ~*^/_matrix/client/v1/rooms/.*/threads$ synapse_workers;
    ~*^/_matrix/client/unstable/im.nheko.summary/summary/.*$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/account/3pid$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/account/whoami$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/account/deactivate$ synapse_workers;
    ~*^/_matrix/client/(r0|v3)/delete_devices$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/devices(/|$) synapse_workers;
    ~*^/_matrix/client/versions$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/voip/turnServer$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/event/ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/joined_rooms$ synapse_workers;
    ~*^/_matrix/client/v1/rooms/.*/timestamp_to_event$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable/.*)/rooms/.*/aliases synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/search$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/user/.*/filter(/|$) synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/directory/room/.*$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/capabilities$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/notifications$ synapse_workers;
    ~*^/_synapse/admin/v1/rooms/[^/]+$ synapse_workers;

    # Registration/login requests
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/login$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/register$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/register/available$ synapse_workers;
    ~*^/_matrix/client/v1/register/m.login.registration_token/validity$ synapse_workers;
    ~*^/_matrix/client/(r0|v3|unstable)/password_policy$ synapse_workers;

    # Event sending requests
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/redact synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/send synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/state/ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/rooms/.*/(join|invite|leave|ban|unban|kick)$ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/join/ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/knock/ synapse_workers;
    ~*^/_matrix/client/(api/v1|r0|v3|unstable)/profile/ synapse_workers;

    # User directory search requests
    ~*^/_matrix/client/(r0|v3|unstable)/user_directory/search$ 192.168.3.117:8011;

    # MAS
    ~*^/_synapse/admin/v2/users/[^/]+$ synapse_workers;
    ~*^/_synapse/admin/v1/username_available$ synapse_workers;
    ~*^/_synapse/admin/v1/users/[^/]+/_allow_cross_signing_replacement_without_uia$ synapse_workers;
    ~*^/_synapse/admin/v1/users/[^/]+/devices$ synapse_workers;

    default 192.168.3.117:8008;

}

upstream synapse_sync_workers {
    # Use the username mapper result for hash key
    hash $mxid_localpart consistent;
    server 192.168.3.117:8009;
    server 192.168.3.117:8010;
}

upstream synapse_workers {
    server 192.168.3.117:8009;
    server 192.168.3.117:8010;
}

server {
    listen 443 quic;
    listen 443 ssl;
    listen [::]:443 quic;
    listen [::]:443 ssl;
    listen 8443 ssl proxy_protocol;

    server_name matrix.metropolis.nexus;

    ssl_certificate /etc/letsencrypt/live/matrix.metropolis.nexus/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/matrix.metropolis.nexus/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/matrix.metropolis.nexus/chain.pem;

    include headers-more.d/universal.conf;
    include snippets/proxy.conf;

    more_set_headers "Cross-Origin-Resource-Policy: cross-origin";
    more_clear_headers Cross-Origin-Embedder-Policy;

    proxy_hide_header Access-Control-Allow-Origin;
    more_set_headers  "Access-Control-Allow-Origin: *";

    proxy_hide_header Access-Control-Allow-Methods;
    more_set_headers  "Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS";

    proxy_hide_header Access-Control-Allow-Headers;
    more_set_headers  "Access-Control-Allow-Headers: X-Requested-With, Content-Type, Authorization, If-None-Match, If-Match";

    client_max_body_size 25M;

    location ~ ^/_matrix/client/(.*)/(login|logout|refresh) {
        proxy_pass http://192.168.3.117:8081;
    }

    location / {
        proxy_pass http://$synapse_backend;
    }

}

server {
    listen 443 quic;
    listen 443 ssl;
    listen [::]:443 quic;
    listen [::]:443 ssl;
    listen 8443 ssl proxy_protocol;

    server_name element.metropolis.nexus;

    ssl_certificate /etc/letsencrypt/live/matrix.metropolis.nexus/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/matrix.metropolis.nexus/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/matrix.metropolis.nexus/chain.pem;

    include headers-more.d/universal.conf;
    include snippets/proxy.conf;

    more_clear_headers X-Robots-Tag;
    more_clear_headers Cross-Origin-Embedder-Policy;

    more_set_headers "Cross-Origin-Resource-Policy: cross-origin";
    more_set_headers "X-Frame-Options: SAMEORIGIN";
    more_set_headers "X-Content-Type-Options: nosniff";

    more_set_headers "Permissions-Policy: accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), bluetooth=(), browsing-topics=(), clipboard-read=(), document-domain=(), encrypted-media=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), idle-detection=(), interest-cohort=(), keyboard-map=(), local-fonts=(), magnetometer=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-create=self, publickey-credentials-get=self, serial=(), speaker-selection=(), sync-xhr=(), usb=(), xr-spatial-tracking=()";

    proxy_hide_header Content-Security-Policy;
    more_set_headers "Content-Security-Policy: default-src 'none'; connect-src 'self' https://metropolis.nexus https://matrix.metropolis.nexus https://mas.metropolis.nexus blob:; font-src 'self'; img-src 'self' https://static.metropolis.nexus/element.jpg https://matrix.metropolis.nexus blob: data:; manifest-src 'self'; media-src 'self' https://matrix.arcticfoxes.net blob: data:; script-src 'self' 'unsafe-eval'; style-src-attr 'unsafe-inline'; style-src-elem 'self' 'unsafe-inline'; frame-src 'self' https://jitsi.metropolis.nexus blob:; frame-ancestors 'self'; upgrade-insecure-requests; base-uri 'none'";

    location / {
        proxy_pass http://192.168.3.117:8080;
    }

}

server {
    listen 443 quic;
    listen 443 ssl;
    listen [::]:443 quic;
    listen [::]:443 ssl;
    listen 8443 ssl proxy_protocol;

    server_name mas.metropolis.nexus;

    ssl_certificate /etc/letsencrypt/live/matrix.metropolis.nexus/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/matrix.metropolis.nexus/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/matrix.metropolis.nexus/chain.pem;

    include headers-more.d/universal.conf;
    include snippets/proxy.conf;

    more_clear_headers Cross-Origin-Embedder-Policy;

    location / {
        proxy_pass http://192.168.3.117:8081;
    }

}