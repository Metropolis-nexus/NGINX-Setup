# Use http2
http2 on;

# Use http3
http3 on;

# Shared TLS configuration

## Use strong ciphers
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256;
ssl_prefer_server_ciphers on;
ssl_conf_command Options PrioritizeChaCha;

# Use strong ciphers for proxies
proxy_ssl_verify on;
proxy_ssl_server_name on;
proxy_ssl_session_reuse on;
proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
proxy_ssl_protocols TLSv1.2 TLSv1.3;
proxy_ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256;
proxy_ssl_conf_command Options PrioritizeChaCha;

## Configure ssl session cache
## Improves performance but we don't wanna keep this forever

ssl_session_cache shared:SSL:10m; # About 40000 sessions
ssl_session_timeout 1d;
ssl_session_ticket_key session-ticket-keys/4.key;
ssl_session_ticket_key session-ticket-keys/3.key;
ssl_session_ticket_key session-ticket-keys/2.key;
ssl_session_ticket_key session-ticket-keys/1.key;

## The following settings need to be declared manually per vhost:
## ssl_certificate
## ssl_certificate_key
## ssl_trusted_certificate
## ssl_stapling_file

# Make sure ssl early data is off - replay attack mitigation
ssl_early_data off;

# Set-Cookie
proxy_cookie_domain ~ "";
proxy_cookie_flags ~ secure;

# Disable compression
## Mitigates oracle attacks
gzip off;

# Disable server tokens
server_tokens off;

# Make the Connection header dependant on the Upgrade header
# https://nginx.org/en/docs/http/websocket.html
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''	close;
}

# https://github.com/mdn/browser-compat-data/issues/24299
# Unclear if this is a Safari bug or missing feature
# Regex: https://stackoverflow.com/questions/46471307/how-to-not-return-a-regex-match-if-a-user-agent-string-contains-chrome

map $http_user_agent $style_src_type1 {
    "~(?!.*(?:Chrome|Edge)).*Safari"    "style-src 'self'";
    default                             "style-src-elem 'self'";
}

map $http_user_agent $style_src_type2 {
    "~(?!.*(?:Chrome|Edge)).*Safari"    "style-src 'unsafe-inline'";
    default                             "style-src-elem 'unsafe-inline'";
}

map $http_user_agent $style_src_type3 {
    "~(?!.*(?:Chrome|Edge)).*Safari"    "style-src 'self' 'unsafe-inline'";
    default                             "style-src-attr 'self'; style-src-elem 'unsafe-inline'";
}

map $http_user_agent $style_src_type4 {
    "~(?!.*(?:Chrome|Edge)).*Safari"    "style-src 'self' 'unsafe-inline'";
    default                             "style-src-attr 'self'; style-src-elem 'self' 'unsafe-inline'";
}

map $http_user_agent $style_src_type5 {
    "~(?!.*(?:Chrome|Edge)).*Safari"    "style-src 'self' 'unsafe-inline'";
    default                             "style-src-attr 'unsafe-inline'; style-src-elem 'self'";
}

map $http_user_agent $style_src_type6 {
    "~(?!.*(?:Chrome|Edge)).*Safari"    "style-src 'self' 'unsafe-inline'";
    default                             "style-src-attr 'unsafe-inline'; style-src-elem 'self' 'unsafe-inline'";
}